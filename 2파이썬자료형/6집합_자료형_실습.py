
# 집합 자료형이란?
# 집합은 파이썬2.3버전부터 지원하기 시작한 자료형으로,
# 집합에 관련된 것을 쉽게 처리하기위해 만든 자료형

# 집합 자료형은 어떻게 만들까?
# set키워드를 사용해 만들 수 있다.
s1 = set([1,2,3,]) # set()의 괄호 안에 리스트를 입력하여 만든다.
print(s1) # {1, 2, 3} 출력

s2 = set("Hello") #set()의 괄호 안에 문자열을 입력하여 만들 수도 있다.
print(s2) # {'l', 'e', 'o', 'H'} 출력 - 실행할 때마다 순서 무작위
# "Hello" 문자열로 생성된 set자료형에는 l문자가 하나 빠져있고
# 순서도 뒤죽박죽이다. 그 이뉴는 set자료형에 다음과 같은 2가지 큰 특징이 있기 때문

# 집합 자료형의 특징2가지
# 1. 중복을 허용하지 않는다.
# 2. 순서 없음.

# set자료형에 저장된 값을 인덱싱으로 접근하려면
# 리스트나 튜플로 변환한 후에 해야한다.
s1 = set([1,2,3])
print(s1)
l1 = list(s1)
print(l1) # {1, 2, 3}집합자료형(set)을 [1, 2, 3] 리스트 자료형으로 변환해줌
print(l1[0]) # 리스트의 0번 인덱스의 값 1을 얻어 출력

t1 = tuple(s1) # 집합을 튜플로 변환
print(t1) # (1, 2, 3) 튜플 출력
print(t1[0]) # 튜플의 0번 인덱스의 요소 값 1을 출력

# set집합자료형을 유용하게 사용하는 경우는 교집합, 합집합, 차집합을 구할 때 이다.
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])

# 교집합 구하기
print(s1 & s2) # {4, 5, 6} 출력
# intersection함수를 사용
print(s1.intersection(s2))

# 합집합 구하기
print(s1 | s2) # {1, 2, 3, 4, 5, 6, 7, 8, 9} 출력
# union함수 사용
print(s1.union(s2))

# 차집합 구하기
print(s1 - s2)
# difference함수 사용
print(s2.difference(s1))

# 집합 자료형 관련 함수
# 이미 만들어져있는 set자료형에 값을 추가할 수 있다.
s1 = set([1,2,3,]) # {1,2,3} 집합
s1.add(4)
print(s1) # {1,2,3,4}

# 여러 개의 값을 집합에 추가하는 경우에는 update함수를 사용
s1 = set([1,2,3,]) # {1,2,3} 집합
s1.update([4,5,6]) # {1,2,3,4,5,6} 집합
print(s1)

# 집합에 저장된 특정 값 제거시~ remove함수 사용
s1 = set([1,2,3])
s1.remove(2)
print(s1)





